@model IEnumerable<Khuluma_Server.Models.ViewModels.AutoMessageViewModel>

@{
    ViewBag.Title = "Automated Messages";
}

@(Html.EJ().Grid<Khuluma_Server.Models.ViewModels.AutoMessageViewModel>("Grid")
        .Datasource((IEnumerable<Khuluma_Server.Models.ViewModels.AutoMessageViewModel>)Model)
        .AllowPaging()
        .AllowGrouping()
        .AllowFiltering()
        .AllowResizeToFit()
        .ContextMenuSettings(contextMenu =>
        {
            contextMenu.EnableContextMenu();
        })
        .FilterSettings(d => d.FilterType(FilterType.FilterBar))
        .AllowSelection()
        .SelectionType(SelectionType.Single)
        .SelectionSettings(select => { select.SelectionMode(mode => { mode.AddMode(SelectionMode.Row); }); })
        .ClientSideEvents(eve => { eve.ToolbarClick("onToolBarClick"); })
        .ClientSideEvents(eve => { eve.RecordClick("onRecordClick"); })

        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {

            });
            toolbar.CustomToolbarItems(new List<object>() {
                new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#Refresh"}
            });
        })
)
<style type="text/css" class="cssStyles">
    .view:before {
        content: "\e677";
    }
</style>
<script id="Refresh" type="text/x-jsrender">


    <button type="button" class="btn btn-default btn-sm">
        <span class="gr-send">SEND NOW</span>
    </button>

    <button type="button" class="btn btn-default btn-sm">
        <span class="gr-edit">EDIT</span>
    </button>

    <button type="button" class="btn btn-default btn-sm">
        <span class="gr-delete">DELETE</span>
    </button>
    
</script>



<script>
    function onRecordClick(args) {
        console.log("TB Clicked");


        var tbarObj = $(args.target), grid = this;
        console.log(tbarObj);
        var selectedrecords = grid.getSelectedRecords();

            console.log("GR SEND");
            console.log(selectedrecords);

            for (let value of selectedrecords) {

                thisgroupID = value.GroupId;
                thisgroupName = value.GroupName;
                var messageText = value.MessageText;
                console.log("Gr Name " + thisgroupName + "ID " + thisgroupID + "Msg " + messageText);
            }

            $("#message").val(messageText);
            $("#groupid").val(thisgroupID);
            $("#groupname").val(thisgroupName);

                console.log("Load Data");



        console.log(selectedrecords);
    }
    function onToolBarClick(args) {

        var newWindow = false;
                var url = "";
                var tbarObj = $(args.target), grid = this;
                
                console.log(tbarObj);

                var selectedrecords = grid.getSelectedRecords();

                for (let value of selectedrecords) {
                    console.log("VALUE: " + value);
                    var autoMessageID = value.AutoMessageId;
                    console.log("value.Dashboard" + value.DashboardGroupViewModelId);
                    console.log(value);
                }

                //Get Button class
                if (tbarObj.hasClass("gr-send")) {
                    
                };


                if (tbarObj.hasClass("gr-edit")) {
                    console.log("In gr-edit");
                    url = '@Url.Action("Edit", "PredefinedMessageModels")';
                };

                if (tbarObj.hasClass("gr-delete")) {
                    console.log("In gr-delete");
                    url = '@Url.Action("Delete", "PredefinedMessageModels")';
                };

                //Check for ID and redirect
                if (autoMessageID) {

                    if (newWindow == true)
                    {
                        window.open(url + '/' + autoMessageID, '_blank');
                    } else {
                        location.href = url + '/' + autoMessageID;
                    }


                } else {
                    console.log("none selected");
                    alert("Please select an auto message");
                }



                console.log(selectedrecords);

    }


</script>

<div class="container">
    <input type="hidden" id="message" value="" />
    <input type="hidden" id="groupid" value="" />
    <input type="hidden" id="groupname" value="" />
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;

            var thisgroupName = "@ViewBag.GroupName";
            var thisgroupID = "@ViewBag.GroupId";

            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message, timestamp) {
                // Add the message to the page.
                $('#discussion').append(htmlEncode(timestamp) + '<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };


            

            // Get the user name and store it to prepend to messages.
            $('#displayname').val("Khuluma");
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $("#autosend-button").css("color", "green");
                $('.gr-send').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send("AUTOMSG: Khuluma", $('#message').val(), 1, $('#groupname').val(), $('#groupid').val());
                    // Clear text box and reset focus for next comment.
                    alert("Message sent");
                });

               

            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        
    </script>
}






